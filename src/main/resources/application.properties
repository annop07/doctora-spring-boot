# Server Configuration
server.port=${PORT:8080}

# Database Configuration - Railway PostgreSQL
# Using custom DatabaseConfig class that reads PGHOST, PGUSER, etc. directly
# This avoids conflicts with Railway's DATABASE_URL

# Flyway Configuration - will use the custom DataSource bean
spring.flyway.enabled=true
spring.flyway.locations=classpath:db/migration
spring.flyway.baseline-on-migrate=true

# JPA Configuration
spring.jpa.database=postgresql
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.format_sql=false
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

# Flyway Configuration
spring.flyway.enabled=true
spring.flyway.locations=classpath:db/migration
spring.flyway.baseline-on-migrate=true

# Logging Configuration
logging.level.com.doctorbook=INFO
logging.level.org.springframework.security=INFO
logging.level.org.hibernate.SQL=INFO
logging.level.org.springframework.boot.autoconfigure.jdbc=DEBUG
logging.level.org.springframework.jdbc.datasource=DEBUG
logging.level.com.zaxxer.hikari=DEBUG

# JWT Configuration
jwt.secret=${JWT_SECRET:mySecretKey12345678901234567890123456789012345678901234567890}
jwt.expiration=86400000

# CORS Configuration - Allow Railway domains
cors.allowed-origins=${CORS_ORIGINS:http://localhost:3000,http://localhost:3001}
# Note: CORS_ORIGINS should be full URLs like https://domain.com,http://localhost:3000